#!/usr/bin/python3

'''
Pequeno tutor de um Instituto Computacional.
'''

import fire

class Diretorio:

    '''Exemplos de operações CRUD que podem ser executadas em diretórios.'''

    def criar(self):
        '''Resumo de como criar um diretório.'''

        return '''\
- Criar um diretório:
  mkdir {{diretorio}}

- Criar diretórios recursivamente
  mkdir -p {{caminho/para/diretorio}}

'''

    def ler(self):
        '''Resumo de como ler um diretório.'''

        return '''\
1. Ir para o diretório:
   cd {{caminho/para/diretorio}}

2. Listar arquivos
   ls

3. Listar arquivos ocultos
   ls -a

4. Listar arquivos ocultos menos (.) e (..)
   ls -A

Obs.:
  "." simboliza o diretório atual (Ex.: ./um-programa )
  ".." simboliza o diretório pai (Ex.: ls ../ )
'''

    def atualizar(self):
        '''Resumo de como atualizar um diretório.'''

        return '''\
- Excluir um arquivo:
  rm {{arquivo}}

- Excluir arquivo(s) baseado em padrões (glob):
  rm *.{{extensão}}

- Copiar arquivos:
  cp {{caminho/para/arquivo(s)}} .

- Copiar diretórios inteiros para o diretório atual:
  cp -r {{caminho/para/arquivo(s)}} .

- Renomear um arquivo:
  mv {{nome-velho}} {{nome-novo}}

- Mover um arquivo de outro diretório:
  mv {{caminho/para/arquivo(s)}} .

- Clonar um repositório do Git:
  git clone {{url}}

- Trazer atualizações feitas em repositório remoto:
  git pull

- Descompactar um arquivo:
  unzip {{arquivo.zip}}
  tar zxvf {{arquivo.tar.gz}}
  tar jxvf {{arquivo.tar.bz2}}
'''

    def excluir(self):
        '''Resumo de como excluir um diretório.'''

        return '''\
- Excluir um diretório vazio:
  rmdir {{caminho/para/diretorio}}

- Excluir um diretório e todo seu conteúdo:
  rm -r {{caminho/para/diretorio}}
'''

class Arquivo:
    '''Exemplos de operações CRUD que podem ser executadas em arquivos.'''

    def criar(self):
        '''Resumo de como criar um arquivo.'''

        return '''\
- Criar um arquivo vazio:
  touch {{nome-do-arquivo}}

- Criar um arquivo com editor de texto de linha de comando:
  {{editor}} {{nome-do-arquivo}}

- Criar um arquivo a partir da saída de um comando:
  {{comando}} > {{nome-do-arquivo}}
'''

    def ler(self):
        '''Resumo de como ler um arquivo.'''

        return f'''\
- Leitura de arquivo curto:
  cat {{nome-do-arquivo}}

- Leitura de arquivo longo:
  less {{nome-do-arquivo}}
  bat {{nome-do-arquivo}}
 
'''

    def atualizar(self):
        '''Resumo de como atualizar um arquivo.'''

        return f'''\
- Atualizar a data de modificação do arquivo:
  touch {{nome-do-arquivo}}

- Alterar o arquivo com editor de texto de linha de comando:
  {{editor}} {{nome-do-arquivo}}

- Atualizar o arquivo a partir da saída de um comando:
  {{comando}} >> {{nome-do-arquivo}}

- Substituir trechos em arquivos
  sed -i "s/{{trecho_procurado}}/{{trecho_novo}}/g"  {{nome-do-arquivo}}
'''

    def excluir(self):
        '''Resumo de como excluir um arquivo.'''

        return f'''\
 - Remove arquivos de localizações arbitrárias:
   rm {{caminho/para/arquivo}} {{caminho/para/outro/arquivo}}

 - Remove recursivamente um diretório e todos seus subdiretórios:
   rm -r {{caminho/para/diretório}}

 - Remove forçosamente um diretório, sem solicitar a confirmação ou mostrando mensagens de erro:
   rm -rf {{caminho/para/diretório}}

 - Remove interativamente vários arquivos, com um aviso antes de cada remoção:
   rm -i {{arquivo(s)}}

 - Remove arquivos no modo detalhado, exibindo uma mensagem para cada arquivo removido:
   rm -v {{caminho/para/diretório/*}}

'''

class Tubulacao:
    def __init__(self):
        self.diretorio = Diretorio()
        self.arquivo = Arquivo()

if __name__ == '__main__':
    fire.Fire(Tubulacao)
